// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stats {
  bucket  BigInt
  unit    BigInt
  hits    Int
  traceId String
  trace   Trace  @relation(fields: [traceId], references: [id], onDelete: Cascade)

  @@unique([bucket, unit, traceId])
}

model Trace {
  id          String  @id @default(cuid())
  application String
  event       String
  trace       String
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  Stats       Stats[]

  @@unique([application, event, trace])
  @@index([application])
  @@index([event])
  @@index([userId])
}

model ApiKey {
  key    String @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([key])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ApiKeys       ApiKey[]
  Trace         Trace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
